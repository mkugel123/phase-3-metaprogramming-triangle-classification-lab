
[1mFrom:[0m /home/mkugel123/development/code/phase-3-metaprogramming-triangle-classification-lab/lib/triangle.rb:27 Triangle#kind:

    [1;34m11[0m: [32mdef[0m [1;34mkind[0m 
    [1;34m12[0m:   [1;34m# raise TriangleError[0m
    [1;34m13[0m:   [1;34m# if self.sides.include?(0)[0m
    [1;34m14[0m:   [1;34m#   raise TriangleError[0m
    [1;34m15[0m:   [1;34m# elsif self.sides.each { |num| num > self.sides.sum - num }[0m
    [1;34m16[0m:   [1;34m#   raise TriangleError[0m
    [1;34m17[0m:   [1;34m# elsif self.sides.each { |num| num.negative? }[0m
    [1;34m18[0m:   [1;34m#   raise TriangleError[0m
    [1;34m19[0m:   [1;34m# else[0m
    [1;34m20[0m:     [32mif[0m [1;36mself[0m.sides.uniq.count == [1;34m1[0m
    [1;34m21[0m:       [33m:equilateral[0m
    [1;34m22[0m:     [32melsif[0m [1;36mself[0m.sides.uniq.count == [1;34m2[0m
    [1;34m23[0m:       [33m:isosceles[0m
    [1;34m24[0m:     [32melsif[0m [1;36mself[0m.sides.uniq.count == [1;34m3[0m
    [1;34m25[0m:       [33m:scalene[0m
    [1;34m26[0m:     [32mend[0m
 => [1;34m27[0m:     binding.pry  
    [1;34m28[0m:   [1;34m# end[0m
    [1;34m29[0m: [32mend[0m

